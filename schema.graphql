type Addon implements Node {
  addonItems(filter: AddonItemFilter, orderBy: AddonItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AddonItemConnection
  createdAt: DateTime!
  id: ID!
  multiple: Boolean!
  name: String!
  updatedAt: DateTime!
}

input AddonaddonItemsAddonItem {
  name: String!
  price: Float!
}

# A connection to a list of items.
type AddonConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AddonEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type AddonEdge {
  # The item at the end of the edge.
  node: Addon!

  # A cursor for use in pagination.
  cursor: String!
}

input AddonFilter {
  # Logical AND on all given filters.
  AND: [AddonFilter!]

  # Logical OR on all given filters.
  OR: [AddonFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  multiple: Boolean

  # All values that are not equal to given value.
  multiple_not: Boolean
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  addonItems_every: AddonItemFilter
  addonItems_some: AddonItemFilter
  addonItems_none: AddonItemFilter
}

type AddonItem implements Node {
  addon(filter: AddonFilter): Addon
  createdAt: DateTime!
  id: ID!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

input AddonItemaddonAddon {
  multiple: Boolean!
  name: String!
  addonItemsIds: [ID!]
  addonItems: [AddonItemaddonAddonaddonItemsAddonItem!]
}

input AddonItemaddonAddonaddonItemsAddonItem {
  name: String!
  price: Float!
}

# A connection to a list of items.
type AddonItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AddonItemEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type AddonItemEdge {
  # The item at the end of the edge.
  node: AddonItem!

  # A cursor for use in pagination.
  cursor: String!
}

input AddonItemFilter {
  # Logical AND on all given filters.
  AND: [AddonItemFilter!]

  # Logical OR on all given filters.
  OR: [AddonItemFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  price: Float

  # All values that are not equal to given value.
  price_not: Float

  # All values that are contained in given list.
  price_in: [Float!]

  # All values that are not contained in given list.
  price_not_in: [Float!]

  # All values less than the given value.
  price_lt: Float

  # All values less than or equal the given value.
  price_lte: Float

  # All values greater than the given value.
  price_gt: Float

  # All values greater than or equal the given value.
  price_gte: Float
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  addon: AddonFilter
}

enum AddonItemOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum AddonOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  multiple_ASC
  multiple_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AddToAddonOnAddonItemAddonInput {
  addonItemsAddonItemId: ID!
  addonAddonId: ID!
  clientMutationId: String!
}

type AddToAddonOnAddonItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  addonAddon: Addon
  addonItemsAddonItem: AddonItem
  addonAddonEdge: AddonEdge
  addonItemsAddonItemEdge: AddonItemEdge
}

input AddToCategoryOnRestaurantCategoryInput {
  restaurantRestaurantId: ID!
  categoriesCategoryId: ID!
  clientMutationId: String!
}

type AddToCategoryOnRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  categoriesCategory: Category
  restaurantRestaurant: Restaurant
  categoriesCategoryEdge: CategoryEdge
  restaurantRestaurantEdge: RestaurantEdge
}

input AddToFoodOnCategoryFoodInput {
  categoryCategoryId: ID!
  foodsFoodId: ID!
  clientMutationId: String!
}

type AddToFoodOnCategoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodsFood: Food
  categoryCategory: Category
  foodsFoodEdge: FoodEdge
  categoryCategoryEdge: CategoryEdge
}

input AddToFoodOnRestaurantFoodInput {
  restaurantRestaurantId: ID!
  foodsFoodId: ID!
  clientMutationId: String!
}

type AddToFoodOnRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodsFood: Food
  restaurantRestaurant: Restaurant
  foodsFoodEdge: FoodEdge
  restaurantRestaurantEdge: RestaurantEdge
}

type AddToRestaurantOnCuisinePayload {
  viewer: Viewer!
  clientMutationId: String!
  restaurantsRestaurant: Restaurant
  cuisineCuisine: Cuisine
  restaurantsRestaurantEdge: RestaurantEdge
  cuisineCuisineEdge: CuisineEdge
}

input AddToRestaurantOnCuisineRestaurantInput {
  cuisineCuisineId: ID!
  restaurantsRestaurantId: ID!
  clientMutationId: String!
}

type Banner implements Node {
  createdAt: DateTime!
  id: ID!
  image: String!
  ref: String!
  type: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type BannerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BannerEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type BannerEdge {
  # The item at the end of the edge.
  node: Banner!

  # A cursor for use in pagination.
  cursor: String!
}

input BannerFilter {
  # Logical AND on all given filters.
  AND: [BannerFilter!]

  # Logical OR on all given filters.
  OR: [BannerFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  image: String

  # All values that are not equal to given value.
  image_not: String

  # All values that are contained in given list.
  image_in: [String!]

  # All values that are not contained in given list.
  image_not_in: [String!]

  # All values less than the given value.
  image_lt: String

  # All values less than or equal the given value.
  image_lte: String

  # All values greater than the given value.
  image_gt: String

  # All values greater than or equal the given value.
  image_gte: String

  # All values containing the given string.
  image_contains: String

  # All values not containing the given string.
  image_not_contains: String

  # All values starting with the given string.
  image_starts_with: String

  # All values not starting with the given string.
  image_not_starts_with: String

  # All values ending with the given string.
  image_ends_with: String

  # All values not ending with the given string.
  image_not_ends_with: String
  ref: String

  # All values that are not equal to given value.
  ref_not: String

  # All values that are contained in given list.
  ref_in: [String!]

  # All values that are not contained in given list.
  ref_not_in: [String!]

  # All values less than the given value.
  ref_lt: String

  # All values less than or equal the given value.
  ref_lte: String

  # All values greater than the given value.
  ref_gt: String

  # All values greater than or equal the given value.
  ref_gte: String

  # All values containing the given string.
  ref_contains: String

  # All values not containing the given string.
  ref_not_contains: String

  # All values starting with the given string.
  ref_starts_with: String

  # All values not starting with the given string.
  ref_not_starts_with: String

  # All values ending with the given string.
  ref_ends_with: String

  # All values not ending with the given string.
  ref_not_ends_with: String
  type: String

  # All values that are not equal to given value.
  type_not: String

  # All values that are contained in given list.
  type_in: [String!]

  # All values that are not contained in given list.
  type_not_in: [String!]

  # All values less than the given value.
  type_lt: String

  # All values less than or equal the given value.
  type_lte: String

  # All values greater than the given value.
  type_gt: String

  # All values greater than or equal the given value.
  type_gte: String

  # All values containing the given string.
  type_contains: String

  # All values not containing the given string.
  type_not_contains: String

  # All values starting with the given string.
  type_starts_with: String

  # All values not starting with the given string.
  type_not_starts_with: String

  # All values ending with the given string.
  type_ends_with: String

  # All values not ending with the given string.
  type_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum BannerOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  ref_ASC
  ref_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

type Category implements Node {
  createdAt: DateTime!
  foods(filter: FoodFilter, orderBy: FoodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection
  id: ID!
  name: String!
  restaurant(filter: RestaurantFilter): Restaurant
  updatedAt: DateTime!
}

# A connection to a list of items.
type CategoryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CategoryEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CategoryEdge {
  # The item at the end of the edge.
  node: Category!

  # A cursor for use in pagination.
  cursor: String!
}

input CategoryFilter {
  # Logical AND on all given filters.
  AND: [CategoryFilter!]

  # Logical OR on all given filters.
  OR: [CategoryFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  foods_every: FoodFilter
  foods_some: FoodFilter
  foods_none: FoodFilter
  restaurant: RestaurantFilter
}

input CategoryfoodsFood {
  name: String!
  restaurantId: ID
  restaurant: CategoryfoodsFoodrestaurantRestaurant
}

input CategoryfoodsFoodrestaurantRestaurant {
  name: String!
  cuisineId: ID
  cuisine: CategoryfoodsFoodrestaurantRestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [CategoryfoodsFoodrestaurantRestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [CategoryfoodsFoodrestaurantRestaurantfoodsFood!]
}

input CategoryfoodsFoodrestaurantRestaurantcategoriesCategory {
  name: String!
  restaurantId: ID
  foodsIds: [ID!]
}

input CategoryfoodsFoodrestaurantRestaurantcuisineCuisine {
  name: String!
  restaurantsIds: [ID!]
}

input CategoryfoodsFoodrestaurantRestaurantfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

enum CategoryOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CategoryrestaurantRestaurant {
  name: String!
  cuisineId: ID
  cuisine: CategoryrestaurantRestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [CategoryrestaurantRestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [CategoryrestaurantRestaurantfoodsFood!]
}

input CategoryrestaurantRestaurantcategoriesCategory {
  name: String!
  foodsIds: [ID!]
  foods: [CategoryrestaurantRestaurantcategoriesCategoryfoodsFood!]
}

input CategoryrestaurantRestaurantcategoriesCategoryfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

input CategoryrestaurantRestaurantcuisineCuisine {
  name: String!
  restaurantsIds: [ID!]
  restaurants: [CategoryrestaurantRestaurantcuisineCuisinerestaurantsRestaurant!]
}

input CategoryrestaurantRestaurantcuisineCuisinerestaurantsRestaurant {
  name: String!
  cuisineId: ID
  categoriesIds: [ID!]
  foodsIds: [ID!]
}

input CategoryrestaurantRestaurantfoodsFood {
  name: String!
  categoryId: ID
  category: CategoryrestaurantRestaurantfoodsFoodcategoryCategory
}

input CategoryrestaurantRestaurantfoodsFoodcategoryCategory {
  name: String!
  restaurantId: ID
  foodsIds: [ID!]
}

type Collection implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type CollectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CollectionEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CollectionEdge {
  # The item at the end of the edge.
  node: Collection!

  # A cursor for use in pagination.
  cursor: String!
}

input CollectionFilter {
  # Logical AND on all given filters.
  AND: [CollectionFilter!]

  # Logical OR on all given filters.
  OR: [CollectionFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum CollectionOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CreateAddon {
  multiple: Boolean!
  name: String!
  addonItemsIds: [ID!]
  addonItems: [AddonaddonItemsAddonItem!]
}

input CreateAddonInput {
  multiple: Boolean!
  name: String!
  addonItemsIds: [ID!]
  addonItems: [AddonaddonItemsAddonItem!]
  clientMutationId: String!
}

input CreateAddonItem {
  name: String!
  price: Float!
  addonId: ID
  addon: AddonItemaddonAddon
}

input CreateAddonItemInput {
  name: String!
  price: Float!
  addonId: ID
  addon: AddonItemaddonAddon
  clientMutationId: String!
}

type CreateAddonItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  addonItem: AddonItem
  edge: AddonItemEdge
  addon: Addon
}

type CreateAddonPayload {
  viewer: Viewer!
  clientMutationId: String!
  addon: Addon
  edge: AddonEdge
}

input CreateBanner {
  image: String!
  ref: String!
  type: String!
}

input CreateBannerInput {
  image: String!
  ref: String!
  type: String!
  clientMutationId: String!
}

type CreateBannerPayload {
  viewer: Viewer!
  clientMutationId: String!
  banner: Banner
  edge: BannerEdge
}

input CreateCategory {
  name: String!
  restaurantId: ID
  restaurant: CategoryrestaurantRestaurant
  foodsIds: [ID!]
  foods: [CategoryfoodsFood!]
}

input CreateCategoryInput {
  name: String!
  restaurantId: ID
  restaurant: CategoryrestaurantRestaurant
  foodsIds: [ID!]
  foods: [CategoryfoodsFood!]
  clientMutationId: String!
}

type CreateCategoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  category: Category
  edge: CategoryEdge
  restaurant: Restaurant
}

input CreateCollection {
  name: String!
}

input CreateCollectionInput {
  name: String!
  clientMutationId: String!
}

type CreateCollectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  collection: Collection
  edge: CollectionEdge
}

input CreateCuisine {
  name: String!
  restaurantsIds: [ID!]
  restaurants: [CuisinerestaurantsRestaurant!]
}

input CreateCuisineInput {
  name: String!
  restaurantsIds: [ID!]
  restaurants: [CuisinerestaurantsRestaurant!]
  clientMutationId: String!
}

type CreateCuisinePayload {
  viewer: Viewer!
  clientMutationId: String!
  cuisine: Cuisine
  edge: CuisineEdge
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateFood {
  name: String!
  categoryId: ID
  category: FoodcategoryCategory
  restaurantId: ID
  restaurant: FoodrestaurantRestaurant
}

input CreateFoodInput {
  name: String!
  categoryId: ID
  category: FoodcategoryCategory
  restaurantId: ID
  restaurant: FoodrestaurantRestaurant
  clientMutationId: String!
}

type CreateFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  category: Category
  restaurant: Restaurant
}

input CreateMessage {
  context: String!
  message: String!
  type: String
}

input CreateMessageInput {
  context: String!
  message: String!
  type: String
  clientMutationId: String!
}

type CreateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
}

input CreatePost {
  description: String!
  imageUrl: String!
}

input CreatePostInput {
  description: String!
  imageUrl: String!
  clientMutationId: String!
}

type CreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

input CreateRestaurant {
  name: String!
  cuisineId: ID
  cuisine: RestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [RestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [RestaurantfoodsFood!]
}

input CreateRestaurantInput {
  name: String!
  cuisineId: ID
  cuisine: RestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [RestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [RestaurantfoodsFood!]
  clientMutationId: String!
}

type CreateRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  restaurant: Restaurant
  edge: RestaurantEdge
  cuisine: Cuisine
}

input CreateSlide {
  image: String!
  ref: String!
  type: String!
}

input CreateSlideInput {
  image: String!
  ref: String!
  type: String!
  clientMutationId: String!
}

type CreateSlidePayload {
  viewer: Viewer!
  clientMutationId: String!
  slide: Slide
  edge: SlideEdge
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

type Cuisine implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
  restaurants(filter: RestaurantFilter, orderBy: RestaurantOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type CuisineConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CuisineEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CuisineEdge {
  # The item at the end of the edge.
  node: Cuisine!

  # A cursor for use in pagination.
  cursor: String!
}

input CuisineFilter {
  # Logical AND on all given filters.
  AND: [CuisineFilter!]

  # Logical OR on all given filters.
  OR: [CuisineFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  restaurants_every: RestaurantFilter
  restaurants_some: RestaurantFilter
  restaurants_none: RestaurantFilter
}

enum CuisineOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CuisinerestaurantsRestaurant {
  name: String!
  categoriesIds: [ID!]
  categories: [CuisinerestaurantsRestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [CuisinerestaurantsRestaurantfoodsFood!]
}

input CuisinerestaurantsRestaurantcategoriesCategory {
  name: String!
  foodsIds: [ID!]
  foods: [CuisinerestaurantsRestaurantcategoriesCategoryfoodsFood!]
}

input CuisinerestaurantsRestaurantcategoriesCategoryfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

input CuisinerestaurantsRestaurantfoodsFood {
  name: String!
  categoryId: ID
  category: CuisinerestaurantsRestaurantfoodsFoodcategoryCategory
}

input CuisinerestaurantsRestaurantfoodsFoodcategoryCategory {
  name: String!
  restaurantId: ID
  foodsIds: [ID!]
}

scalar DateTime

input DeleteAddonInput {
  id: ID!
  clientMutationId: String!
}

input DeleteAddonItemInput {
  id: ID!
  clientMutationId: String!
}

type DeleteAddonItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  addonItem: AddonItem
  edge: AddonItemEdge
  addon: Addon
  deletedId: ID
}

type DeleteAddonPayload {
  viewer: Viewer!
  clientMutationId: String!
  addon: Addon
  edge: AddonEdge
  deletedId: ID
}

input DeleteBannerInput {
  id: ID!
  clientMutationId: String!
}

type DeleteBannerPayload {
  viewer: Viewer!
  clientMutationId: String!
  banner: Banner
  edge: BannerEdge
  deletedId: ID
}

input DeleteCategoryInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCategoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  category: Category
  edge: CategoryEdge
  restaurant: Restaurant
  deletedId: ID
}

input DeleteCollectionInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCollectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  collection: Collection
  edge: CollectionEdge
  deletedId: ID
}

input DeleteCuisineInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCuisinePayload {
  viewer: Viewer!
  clientMutationId: String!
  cuisine: Cuisine
  edge: CuisineEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteFoodInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  category: Category
  restaurant: Restaurant
  deletedId: ID
}

input DeleteMessageInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
  deletedId: ID
}

input DeletePostInput {
  id: ID!
  clientMutationId: String!
}

type DeletePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
  deletedId: ID
}

input DeleteRestaurantInput {
  id: ID!
  clientMutationId: String!
}

type DeleteRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  restaurant: Restaurant
  edge: RestaurantEdge
  cuisine: Cuisine
  deletedId: ID
}

input DeleteSlideInput {
  id: ID!
  clientMutationId: String!
}

type DeleteSlidePayload {
  viewer: Viewer!
  clientMutationId: String!
  slide: Slide
  edge: SlideEdge
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type Food implements Node {
  category(filter: CategoryFilter): Category
  createdAt: DateTime!
  id: ID!
  name: String!
  restaurant(filter: RestaurantFilter): Restaurant
  updatedAt: DateTime!
}

input FoodcategoryCategory {
  name: String!
  restaurantId: ID
  restaurant: FoodcategoryCategoryrestaurantRestaurant
  foodsIds: [ID!]
  foods: [FoodcategoryCategoryfoodsFood!]
}

input FoodcategoryCategoryfoodsFood {
  name: String!
  restaurantId: ID
  restaurant: FoodcategoryCategoryfoodsFoodrestaurantRestaurant
}

input FoodcategoryCategoryfoodsFoodrestaurantRestaurant {
  name: String!
  cuisineId: ID
  categoriesIds: [ID!]
  foodsIds: [ID!]
}

input FoodcategoryCategoryrestaurantRestaurant {
  name: String!
  cuisineId: ID
  cuisine: FoodcategoryCategoryrestaurantRestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [FoodcategoryCategoryrestaurantRestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [FoodcategoryCategoryrestaurantRestaurantfoodsFood!]
}

input FoodcategoryCategoryrestaurantRestaurantcategoriesCategory {
  name: String!
  restaurantId: ID
  foodsIds: [ID!]
}

input FoodcategoryCategoryrestaurantRestaurantcuisineCuisine {
  name: String!
  restaurantsIds: [ID!]
}

input FoodcategoryCategoryrestaurantRestaurantfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

# A connection to a list of items.
type FoodConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FoodEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FoodEdge {
  # The item at the end of the edge.
  node: Food!

  # A cursor for use in pagination.
  cursor: String!
}

input FoodFilter {
  # Logical AND on all given filters.
  AND: [FoodFilter!]

  # Logical OR on all given filters.
  OR: [FoodFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  category: CategoryFilter
  restaurant: RestaurantFilter
}

enum FoodOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FoodrestaurantRestaurant {
  name: String!
  cuisineId: ID
  cuisine: FoodrestaurantRestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [FoodrestaurantRestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [FoodrestaurantRestaurantfoodsFood!]
}

input FoodrestaurantRestaurantcategoriesCategory {
  name: String!
  foodsIds: [ID!]
  foods: [FoodrestaurantRestaurantcategoriesCategoryfoodsFood!]
}

input FoodrestaurantRestaurantcategoriesCategoryfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

input FoodrestaurantRestaurantcuisineCuisine {
  name: String!
  restaurantsIds: [ID!]
  restaurants: [FoodrestaurantRestaurantcuisineCuisinerestaurantsRestaurant!]
}

input FoodrestaurantRestaurantcuisineCuisinerestaurantsRestaurant {
  name: String!
  cuisineId: ID
  categoriesIds: [ID!]
  foodsIds: [ID!]
}

input FoodrestaurantRestaurantfoodsFood {
  name: String!
  categoryId: ID
  category: FoodrestaurantRestaurantfoodsFoodcategoryCategory
}

input FoodrestaurantRestaurantfoodsFoodcategoryCategory {
  name: String!
  restaurantId: ID
  foodsIds: [ID!]
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

# messages to show on specific contexts
type Message implements Node {
  context: String!
  createdAt: DateTime!
  id: ID!
  message: String!
  type: String
  updatedAt: DateTime!
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge.
  node: Message!

  # A cursor for use in pagination.
  cursor: String!
}

input MessageFilter {
  # Logical AND on all given filters.
  AND: [MessageFilter!]

  # Logical OR on all given filters.
  OR: [MessageFilter!]
  context: String

  # All values that are not equal to given value.
  context_not: String

  # All values that are contained in given list.
  context_in: [String!]

  # All values that are not contained in given list.
  context_not_in: [String!]

  # All values less than the given value.
  context_lt: String

  # All values less than or equal the given value.
  context_lte: String

  # All values greater than the given value.
  context_gt: String

  # All values greater than or equal the given value.
  context_gte: String

  # All values containing the given string.
  context_contains: String

  # All values not containing the given string.
  context_not_contains: String

  # All values starting with the given string.
  context_starts_with: String

  # All values not starting with the given string.
  context_not_starts_with: String

  # All values ending with the given string.
  context_ends_with: String

  # All values not ending with the given string.
  context_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  message: String

  # All values that are not equal to given value.
  message_not: String

  # All values that are contained in given list.
  message_in: [String!]

  # All values that are not contained in given list.
  message_not_in: [String!]

  # All values less than the given value.
  message_lt: String

  # All values less than or equal the given value.
  message_lte: String

  # All values greater than the given value.
  message_gt: String

  # All values greater than or equal the given value.
  message_gte: String

  # All values containing the given string.
  message_contains: String

  # All values not containing the given string.
  message_not_contains: String

  # All values starting with the given string.
  message_starts_with: String

  # All values not starting with the given string.
  message_not_starts_with: String

  # All values ending with the given string.
  message_ends_with: String

  # All values not ending with the given string.
  message_not_ends_with: String
  type: String

  # All values that are not equal to given value.
  type_not: String

  # All values that are contained in given list.
  type_in: [String!]

  # All values that are not contained in given list.
  type_not_in: [String!]

  # All values less than the given value.
  type_lt: String

  # All values less than or equal the given value.
  type_lte: String

  # All values greater than the given value.
  type_gt: String

  # All values greater than or equal the given value.
  type_gte: String

  # All values containing the given string.
  type_contains: String

  # All values not containing the given string.
  type_not_contains: String

  # All values starting with the given string.
  type_starts_with: String

  # All values not starting with the given string.
  type_not_starts_with: String

  # All values ending with the given string.
  type_ends_with: String

  # All values not ending with the given string.
  type_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum MessageOrderBy {
  context_ASC
  context_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Mutation {
  createAddon(input: CreateAddonInput!): CreateAddonPayload
  createAddonItem(input: CreateAddonItemInput!): CreateAddonItemPayload
  createBanner(input: CreateBannerInput!): CreateBannerPayload
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload
  createCollection(input: CreateCollectionInput!): CreateCollectionPayload
  createCuisine(input: CreateCuisineInput!): CreateCuisinePayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createFood(input: CreateFoodInput!): CreateFoodPayload
  createMessage(input: CreateMessageInput!): CreateMessagePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  createRestaurant(input: CreateRestaurantInput!): CreateRestaurantPayload
  createSlide(input: CreateSlideInput!): CreateSlidePayload
  updateAddon(input: UpdateAddonInput!): UpdateAddonPayload
  updateAddonItem(input: UpdateAddonItemInput!): UpdateAddonItemPayload
  updateBanner(input: UpdateBannerInput!): UpdateBannerPayload
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload
  updateCollection(input: UpdateCollectionInput!): UpdateCollectionPayload
  updateCuisine(input: UpdateCuisineInput!): UpdateCuisinePayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateFood(input: UpdateFoodInput!): UpdateFoodPayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  updateRestaurant(input: UpdateRestaurantInput!): UpdateRestaurantPayload
  updateSlide(input: UpdateSlideInput!): UpdateSlidePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateAddon(input: UpdateOrCreateAddonInput!): UpdateOrCreateAddonPayload
  updateOrCreateAddonItem(input: UpdateOrCreateAddonItemInput!): UpdateOrCreateAddonItemPayload
  updateOrCreateBanner(input: UpdateOrCreateBannerInput!): UpdateOrCreateBannerPayload
  updateOrCreateCategory(input: UpdateOrCreateCategoryInput!): UpdateOrCreateCategoryPayload
  updateOrCreateCollection(input: UpdateOrCreateCollectionInput!): UpdateOrCreateCollectionPayload
  updateOrCreateCuisine(input: UpdateOrCreateCuisineInput!): UpdateOrCreateCuisinePayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateFood(input: UpdateOrCreateFoodInput!): UpdateOrCreateFoodPayload
  updateOrCreateMessage(input: UpdateOrCreateMessageInput!): UpdateOrCreateMessagePayload
  updateOrCreatePost(input: UpdateOrCreatePostInput!): UpdateOrCreatePostPayload
  updateOrCreateRestaurant(input: UpdateOrCreateRestaurantInput!): UpdateOrCreateRestaurantPayload
  updateOrCreateSlide(input: UpdateOrCreateSlideInput!): UpdateOrCreateSlidePayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteAddon(input: DeleteAddonInput!): DeleteAddonPayload
  deleteAddonItem(input: DeleteAddonItemInput!): DeleteAddonItemPayload
  deleteBanner(input: DeleteBannerInput!): DeleteBannerPayload
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload
  deleteCollection(input: DeleteCollectionInput!): DeleteCollectionPayload
  deleteCuisine(input: DeleteCuisineInput!): DeleteCuisinePayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteFood(input: DeleteFoodInput!): DeleteFoodPayload
  deleteMessage(input: DeleteMessageInput!): DeleteMessagePayload
  deletePost(input: DeletePostInput!): DeletePostPayload
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantPayload
  deleteSlide(input: DeleteSlideInput!): DeleteSlidePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToAddonOnAddonItem(input: AddToAddonOnAddonItemAddonInput!): AddToAddonOnAddonItemPayload
  addToCategoryOnRestaurant(input: AddToCategoryOnRestaurantCategoryInput!): AddToCategoryOnRestaurantPayload
  addToFoodOnCategory(input: AddToFoodOnCategoryFoodInput!): AddToFoodOnCategoryPayload
  addToFoodOnRestaurant(input: AddToFoodOnRestaurantFoodInput!): AddToFoodOnRestaurantPayload
  addToRestaurantOnCuisine(input: AddToRestaurantOnCuisineRestaurantInput!): AddToRestaurantOnCuisinePayload
  removeFromAddonOnAddonItem(input: RemoveFromAddonOnAddonItemAddonInput!): RemoveFromAddonOnAddonItemPayload
  removeFromCategoryOnRestaurant(input: RemoveFromCategoryOnRestaurantCategoryInput!): RemoveFromCategoryOnRestaurantPayload
  removeFromFoodOnCategory(input: RemoveFromFoodOnCategoryFoodInput!): RemoveFromFoodOnCategoryPayload
  removeFromFoodOnRestaurant(input: RemoveFromFoodOnRestaurantFoodInput!): RemoveFromFoodOnRestaurantPayload
  removeFromRestaurantOnCuisine(input: RemoveFromRestaurantOnCuisineRestaurantInput!): RemoveFromRestaurantOnCuisinePayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  createdAt: DateTime!
  description: String!
  id: ID!
  imageUrl: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge.
  node: Post!

  # A cursor for use in pagination.
  cursor: String!
}

input PostFilter {
  # Logical AND on all given filters.
  AND: [PostFilter!]

  # Logical OR on all given filters.
  OR: [PostFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  imageUrl: String

  # All values that are not equal to given value.
  imageUrl_not: String

  # All values that are contained in given list.
  imageUrl_in: [String!]

  # All values that are not contained in given list.
  imageUrl_not_in: [String!]

  # All values less than the given value.
  imageUrl_lt: String

  # All values less than or equal the given value.
  imageUrl_lte: String

  # All values greater than the given value.
  imageUrl_gt: String

  # All values greater than or equal the given value.
  imageUrl_gte: String

  # All values containing the given string.
  imageUrl_contains: String

  # All values not containing the given string.
  imageUrl_not_contains: String

  # All values starting with the given string.
  imageUrl_starts_with: String

  # All values not starting with the given string.
  imageUrl_not_starts_with: String

  # All values ending with the given string.
  imageUrl_ends_with: String

  # All values not ending with the given string.
  imageUrl_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum PostOrderBy {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromAddonOnAddonItemAddonInput {
  addonItemsAddonItemId: ID!
  addonAddonId: ID!
  clientMutationId: String!
}

type RemoveFromAddonOnAddonItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  addonAddon: Addon
  addonItemsAddonItem: AddonItem
  addonAddonEdge: AddonEdge
  addonItemsAddonItemEdge: AddonItemEdge
}

input RemoveFromCategoryOnRestaurantCategoryInput {
  restaurantRestaurantId: ID!
  categoriesCategoryId: ID!
  clientMutationId: String!
}

type RemoveFromCategoryOnRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  categoriesCategory: Category
  restaurantRestaurant: Restaurant
  categoriesCategoryEdge: CategoryEdge
  restaurantRestaurantEdge: RestaurantEdge
}

input RemoveFromFoodOnCategoryFoodInput {
  categoryCategoryId: ID!
  foodsFoodId: ID!
  clientMutationId: String!
}

type RemoveFromFoodOnCategoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodsFood: Food
  categoryCategory: Category
  foodsFoodEdge: FoodEdge
  categoryCategoryEdge: CategoryEdge
}

input RemoveFromFoodOnRestaurantFoodInput {
  restaurantRestaurantId: ID!
  foodsFoodId: ID!
  clientMutationId: String!
}

type RemoveFromFoodOnRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodsFood: Food
  restaurantRestaurant: Restaurant
  foodsFoodEdge: FoodEdge
  restaurantRestaurantEdge: RestaurantEdge
}

type RemoveFromRestaurantOnCuisinePayload {
  viewer: Viewer!
  clientMutationId: String!
  restaurantsRestaurant: Restaurant
  cuisineCuisine: Cuisine
  restaurantsRestaurantEdge: RestaurantEdge
  cuisineCuisineEdge: CuisineEdge
}

input RemoveFromRestaurantOnCuisineRestaurantInput {
  cuisineCuisineId: ID!
  restaurantsRestaurantId: ID!
  clientMutationId: String!
}

type Restaurant implements Node {
  categories(filter: CategoryFilter, orderBy: CategoryOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection
  createdAt: DateTime!
  cuisine(filter: CuisineFilter): Cuisine
  foods(filter: FoodFilter, orderBy: FoodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input RestaurantcategoriesCategory {
  name: String!
  foodsIds: [ID!]
  foods: [RestaurantcategoriesCategoryfoodsFood!]
}

input RestaurantcategoriesCategoryfoodsFood {
  name: String!
  restaurantId: ID
  restaurant: RestaurantcategoriesCategoryfoodsFoodrestaurantRestaurant
}

input RestaurantcategoriesCategoryfoodsFoodrestaurantRestaurant {
  name: String!
  cuisineId: ID
  categoriesIds: [ID!]
  foodsIds: [ID!]
}

# A connection to a list of items.
type RestaurantConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RestaurantEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input RestaurantcuisineCuisine {
  name: String!
  restaurantsIds: [ID!]
  restaurants: [RestaurantcuisineCuisinerestaurantsRestaurant!]
}

input RestaurantcuisineCuisinerestaurantsRestaurant {
  name: String!
  categoriesIds: [ID!]
  categories: [RestaurantcuisineCuisinerestaurantsRestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [RestaurantcuisineCuisinerestaurantsRestaurantfoodsFood!]
}

input RestaurantcuisineCuisinerestaurantsRestaurantcategoriesCategory {
  name: String!
  restaurantId: ID
  foodsIds: [ID!]
}

input RestaurantcuisineCuisinerestaurantsRestaurantfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

# An edge in a connection.
type RestaurantEdge {
  # The item at the end of the edge.
  node: Restaurant!

  # A cursor for use in pagination.
  cursor: String!
}

input RestaurantFilter {
  # Logical AND on all given filters.
  AND: [RestaurantFilter!]

  # Logical OR on all given filters.
  OR: [RestaurantFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  categories_every: CategoryFilter
  categories_some: CategoryFilter
  categories_none: CategoryFilter
  cuisine: CuisineFilter
  foods_every: FoodFilter
  foods_some: FoodFilter
  foods_none: FoodFilter
}

input RestaurantfoodsFood {
  name: String!
  categoryId: ID
  category: RestaurantfoodsFoodcategoryCategory
}

input RestaurantfoodsFoodcategoryCategory {
  name: String!
  restaurantId: ID
  restaurant: RestaurantfoodsFoodcategoryCategoryrestaurantRestaurant
  foodsIds: [ID!]
  foods: [RestaurantfoodsFoodcategoryCategoryfoodsFood!]
}

input RestaurantfoodsFoodcategoryCategoryfoodsFood {
  name: String!
  categoryId: ID
  restaurantId: ID
}

input RestaurantfoodsFoodcategoryCategoryrestaurantRestaurant {
  name: String!
  cuisineId: ID
  categoriesIds: [ID!]
  foodsIds: [ID!]
}

enum RestaurantOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SignupUserInput {
  clientMutationId: String!
}

type Slide implements Node {
  createdAt: DateTime!
  id: ID!
  image: String!
  ref: String!
  type: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type SlideConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SlideEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type SlideEdge {
  # The item at the end of the edge.
  node: Slide!

  # A cursor for use in pagination.
  cursor: String!
}

input SlideFilter {
  # Logical AND on all given filters.
  AND: [SlideFilter!]

  # Logical OR on all given filters.
  OR: [SlideFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  image: String

  # All values that are not equal to given value.
  image_not: String

  # All values that are contained in given list.
  image_in: [String!]

  # All values that are not contained in given list.
  image_not_in: [String!]

  # All values less than the given value.
  image_lt: String

  # All values less than or equal the given value.
  image_lte: String

  # All values greater than the given value.
  image_gt: String

  # All values greater than or equal the given value.
  image_gte: String

  # All values containing the given string.
  image_contains: String

  # All values not containing the given string.
  image_not_contains: String

  # All values starting with the given string.
  image_starts_with: String

  # All values not starting with the given string.
  image_not_starts_with: String

  # All values ending with the given string.
  image_ends_with: String

  # All values not ending with the given string.
  image_not_ends_with: String
  ref: String

  # All values that are not equal to given value.
  ref_not: String

  # All values that are contained in given list.
  ref_in: [String!]

  # All values that are not contained in given list.
  ref_not_in: [String!]

  # All values less than the given value.
  ref_lt: String

  # All values less than or equal the given value.
  ref_lte: String

  # All values greater than the given value.
  ref_gt: String

  # All values greater than or equal the given value.
  ref_gte: String

  # All values containing the given string.
  ref_contains: String

  # All values not containing the given string.
  ref_not_contains: String

  # All values starting with the given string.
  ref_starts_with: String

  # All values not starting with the given string.
  ref_not_starts_with: String

  # All values ending with the given string.
  ref_ends_with: String

  # All values not ending with the given string.
  ref_not_ends_with: String
  type: String

  # All values that are not equal to given value.
  type_not: String

  # All values that are contained in given list.
  type_in: [String!]

  # All values that are not contained in given list.
  type_not_in: [String!]

  # All values less than the given value.
  type_lt: String

  # All values less than or equal the given value.
  type_lte: String

  # All values greater than the given value.
  type_gt: String

  # All values greater than or equal the given value.
  type_gte: String

  # All values containing the given string.
  type_contains: String

  # All values not containing the given string.
  type_not_contains: String

  # All values starting with the given string.
  type_starts_with: String

  # All values not starting with the given string.
  type_not_starts_with: String

  # All values ending with the given string.
  type_ends_with: String

  # All values not ending with the given string.
  type_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum SlideOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  ref_ASC
  ref_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UpdateAddon {
  id: ID!
  multiple: Boolean
  name: String
  addonItemsIds: [ID!]
  addonItems: [AddonaddonItemsAddonItem!]
}

input UpdateAddonInput {
  id: ID!
  multiple: Boolean
  name: String
  addonItemsIds: [ID!]
  addonItems: [AddonaddonItemsAddonItem!]
  clientMutationId: String!
}

input UpdateAddonItem {
  id: ID!
  name: String
  price: Float
  addonId: ID
  addon: AddonItemaddonAddon
}

input UpdateAddonItemInput {
  id: ID!
  name: String
  price: Float
  addonId: ID
  addon: AddonItemaddonAddon
  clientMutationId: String!
}

type UpdateAddonItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  addonItem: AddonItem
  edge: AddonItemEdge
  addon: Addon
}

type UpdateAddonPayload {
  viewer: Viewer!
  clientMutationId: String!
  addon: Addon
  edge: AddonEdge
}

input UpdateBanner {
  id: ID!
  image: String
  ref: String
  type: String
}

input UpdateBannerInput {
  id: ID!
  image: String
  ref: String
  type: String
  clientMutationId: String!
}

type UpdateBannerPayload {
  viewer: Viewer!
  clientMutationId: String!
  banner: Banner
  edge: BannerEdge
}

input UpdateCategory {
  id: ID!
  name: String
  restaurantId: ID
  restaurant: CategoryrestaurantRestaurant
  foodsIds: [ID!]
  foods: [CategoryfoodsFood!]
}

input UpdateCategoryInput {
  id: ID!
  name: String
  restaurantId: ID
  restaurant: CategoryrestaurantRestaurant
  foodsIds: [ID!]
  foods: [CategoryfoodsFood!]
  clientMutationId: String!
}

type UpdateCategoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  category: Category
  edge: CategoryEdge
  restaurant: Restaurant
}

input UpdateCollection {
  id: ID!
  name: String
}

input UpdateCollectionInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateCollectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  collection: Collection
  edge: CollectionEdge
}

input UpdateCuisine {
  id: ID!
  name: String
  restaurantsIds: [ID!]
  restaurants: [CuisinerestaurantsRestaurant!]
}

input UpdateCuisineInput {
  id: ID!
  name: String
  restaurantsIds: [ID!]
  restaurants: [CuisinerestaurantsRestaurant!]
  clientMutationId: String!
}

type UpdateCuisinePayload {
  viewer: Viewer!
  clientMutationId: String!
  cuisine: Cuisine
  edge: CuisineEdge
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateFood {
  id: ID!
  name: String
  categoryId: ID
  category: FoodcategoryCategory
  restaurantId: ID
  restaurant: FoodrestaurantRestaurant
}

input UpdateFoodInput {
  id: ID!
  name: String
  categoryId: ID
  category: FoodcategoryCategory
  restaurantId: ID
  restaurant: FoodrestaurantRestaurant
  clientMutationId: String!
}

type UpdateFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  category: Category
  restaurant: Restaurant
}

input UpdateMessage {
  context: String
  id: ID!
  message: String
  type: String
}

input UpdateMessageInput {
  context: String
  id: ID!
  message: String
  type: String
  clientMutationId: String!
}

type UpdateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
}

input UpdateOrCreateAddonInput {
  update: UpdateAddon!
  create: CreateAddon!
  clientMutationId: String!
}

input UpdateOrCreateAddonItemInput {
  update: UpdateAddonItem!
  create: CreateAddonItem!
  clientMutationId: String!
}

type UpdateOrCreateAddonItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  addonItem: AddonItem
  edge: AddonItemEdge
  addon: Addon
}

type UpdateOrCreateAddonPayload {
  viewer: Viewer!
  clientMutationId: String!
  addon: Addon
  edge: AddonEdge
}

input UpdateOrCreateBannerInput {
  update: UpdateBanner!
  create: CreateBanner!
  clientMutationId: String!
}

type UpdateOrCreateBannerPayload {
  viewer: Viewer!
  clientMutationId: String!
  banner: Banner
  edge: BannerEdge
}

input UpdateOrCreateCategoryInput {
  update: UpdateCategory!
  create: CreateCategory!
  clientMutationId: String!
}

type UpdateOrCreateCategoryPayload {
  viewer: Viewer!
  clientMutationId: String!
  category: Category
  edge: CategoryEdge
  restaurant: Restaurant
}

input UpdateOrCreateCollectionInput {
  update: UpdateCollection!
  create: CreateCollection!
  clientMutationId: String!
}

type UpdateOrCreateCollectionPayload {
  viewer: Viewer!
  clientMutationId: String!
  collection: Collection
  edge: CollectionEdge
}

input UpdateOrCreateCuisineInput {
  update: UpdateCuisine!
  create: CreateCuisine!
  clientMutationId: String!
}

type UpdateOrCreateCuisinePayload {
  viewer: Viewer!
  clientMutationId: String!
  cuisine: Cuisine
  edge: CuisineEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateFoodInput {
  update: UpdateFood!
  create: CreateFood!
  clientMutationId: String!
}

type UpdateOrCreateFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  category: Category
  restaurant: Restaurant
}

input UpdateOrCreateMessageInput {
  update: UpdateMessage!
  create: CreateMessage!
  clientMutationId: String!
}

type UpdateOrCreateMessagePayload {
  viewer: Viewer!
  clientMutationId: String!
  message: Message
  edge: MessageEdge
}

input UpdateOrCreatePostInput {
  update: UpdatePost!
  create: CreatePost!
  clientMutationId: String!
}

type UpdateOrCreatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

input UpdateOrCreateRestaurantInput {
  update: UpdateRestaurant!
  create: CreateRestaurant!
  clientMutationId: String!
}

type UpdateOrCreateRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  restaurant: Restaurant
  edge: RestaurantEdge
  cuisine: Cuisine
}

input UpdateOrCreateSlideInput {
  update: UpdateSlide!
  create: CreateSlide!
  clientMutationId: String!
}

type UpdateOrCreateSlidePayload {
  viewer: Viewer!
  clientMutationId: String!
  slide: Slide
  edge: SlideEdge
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdatePost {
  description: String
  id: ID!
  imageUrl: String
}

input UpdatePostInput {
  description: String
  id: ID!
  imageUrl: String
  clientMutationId: String!
}

type UpdatePostPayload {
  viewer: Viewer!
  clientMutationId: String!
  post: Post
  edge: PostEdge
}

input UpdateRestaurant {
  id: ID!
  name: String
  cuisineId: ID
  cuisine: RestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [RestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [RestaurantfoodsFood!]
}

input UpdateRestaurantInput {
  id: ID!
  name: String
  cuisineId: ID
  cuisine: RestaurantcuisineCuisine
  categoriesIds: [ID!]
  categories: [RestaurantcategoriesCategory!]
  foodsIds: [ID!]
  foods: [RestaurantfoodsFood!]
  clientMutationId: String!
}

type UpdateRestaurantPayload {
  viewer: Viewer!
  clientMutationId: String!
  restaurant: Restaurant
  edge: RestaurantEdge
  cuisine: Cuisine
}

input UpdateSlide {
  id: ID!
  image: String
  ref: String
  type: String
}

input UpdateSlideInput {
  id: ID!
  image: String
  ref: String
  type: String
  clientMutationId: String!
}

type UpdateSlidePayload {
  viewer: Viewer!
  clientMutationId: String!
  slide: Slide
  edge: SlideEdge
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allAddons(filter: AddonFilter, orderBy: AddonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AddonConnection!
  allAddonItems(filter: AddonItemFilter, orderBy: AddonItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AddonItemConnection!
  allBanners(filter: BannerFilter, orderBy: BannerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): BannerConnection!
  allCategories(filter: CategoryFilter, orderBy: CategoryOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  allCollections(filter: CollectionFilter, orderBy: CollectionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CollectionConnection!
  allCuisines(filter: CuisineFilter, orderBy: CuisineOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CuisineConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allFoods(filter: FoodFilter, orderBy: FoodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!
  allMessages(filter: MessageFilter, orderBy: MessageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  allPosts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  allRestaurants(filter: RestaurantFilter, orderBy: RestaurantOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantConnection!
  allSlides(filter: SlideFilter, orderBy: SlideOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): SlideConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Addon(id: ID): Addon
  AddonItem(id: ID): AddonItem
  Banner(id: ID): Banner
  Category(id: ID): Category
  Collection(id: ID): Collection
  Cuisine(id: ID): Cuisine
  File(id: ID, secret: String, url: String): File
  Food(id: ID): Food
  Message(id: ID): Message
  Post(id: ID): Post
  Restaurant(id: ID): Restaurant
  Slide(id: ID): Slide
  User(id: ID): User
  id: ID!
}

